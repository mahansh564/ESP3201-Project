import pickle
import os
import numpy as np
import matplotlib.pyplot as plt
import math

# filename = os.path.join('Q-Saves', 'Q_Save.pkl')
# with open(filename, 'rb') as file:
#     Q = pickle.load(file)

# print(Q)








# Q = {((60, 1800), 'ax1_down'): 54.43215225534122, ((60, 2700), 'ax2_up'): 38.13350205691524, ((60, 3600), 'ax1_down'): 41.618685250947934, ((100, 2700), 'ax2_down'): -24.145354821373893, ((40, 3600), 'ax1_up'): 31.036542715438006, ((0, 1800), 'ax1_down'): 17.616422180491682, ((40, 900), 'ax1_down'): 6.8480579197089355, ((0, 3600), 'ax1_up'): 0, ((40, 1800), 'ax1_down'): 36.45275807089578, ((20, 4500), 'ax2_up'): 32.69327492829862, ((80, 4500), 'ax2_down'): 0, ((60, 900), 'ax2_down'): 0.0, ((100, 0), 'ax2_up'): 0, ((100, 1800), 'ax2_down'): 38.75655527158284, ((0, 0), 'ax2_up'): 0, ((40, 4500), 'ax2_down'): 0, ((60, 0), 'ax1_up'): 2.0452830184260335, ((60, 0), 'ax2_up'): 0, ((40, 0), 'ax2_down'): 10.118751579907206, ((20, 0), 'ax1_down'): 1.3137679221899816, ((60, 900), 'ax1_down'): 27.004135760020972, ((0, 2700), 'ax1_up'): 0, ((40, 1800), 'ax2_down'): 34.91537167340935, ((60, 2700), 'ax1_up'): 36.686265977876666, ((20, 900), 'ax1_down'): 15.504308227251752, ((0, 4500), 'ax1_up'): 0, ((0, 1800), 'ax2_down'): 10.972546677674766, ((60, 4500), 'ax1_up'): 33.315548964125945, ((60, 4500), 'ax1_down'): -41.545692990231046, ((80, 3600), 'ax1_up'): 57.361802434257484, ((20, 1800), 'ax1_down'): 14.14480040182116, ((80, 1800), 'ax1_up'): 31.172441039799953, ((20, 2700), 'ax2_up'): 19.610156567367184, ((80, 0), 'ax2_down'): 20.69991295049969, ((20, 2700), 'ax1_down'): 31.69757307721611, ((0, 2700), 'ax1_down'): 11.190639972108743, ((20, 900), 'ax2_down'): 14.43301550213765, ((40, 0), 'ax2_up'): 0, ((80, 2700), 'ax1_down'): 20.715375733041824, ((20, 0), 'ax1_up'): 0.0, ((20, 3600), 'ax2_up'): 26.450705465390236, ((100, 2700), 'ax2_up'): -82.4592317721731, ((80, 3600), 'ax2_down'): 27.863530670123225, ((100, 1800), 'ax1_up'): 37.52648904802837, ((40, 2700), 'ax2_up'): 27.374978012229544, ((0, 3600), 'ax2_up'): 8.428254079005962, ((0, 4500), 'ax1_down'): 23.982406199455696, ((40, 2700), 'ax2_down'): 27.918471968498732, ((80, 0), 'ax1_up'): 4.39130527969969, ((40, 900), 'ax1_up'): 5.567545967184147, ((40, 4500), 'ax2_up'): 44.68969465203345, ((0, 3600), 'ax1_down'): 30.378751164322786, ((60, 2700), 'ax1_down'): 53.70244785851491, ((20, 4500), 'ax1_up'): 18.458284765160702, ((80, 1800), 'ax1_down'): 37.31141772830446, ((100, 0), 'ax1_down'): 0, ((100, 900), 'ax2_up'): 11.556023237345048, ((100, 3600), 'ax1_down'): 0, ((40, 900), 'ax2_down'): 25.955940118339967, ((40, 4500), 'ax1_down'): 24.46932561706351, ((80, 900), 'ax1_down'): 4.503119581954936, ((60, 3600), 'ax2_up'): 22.236785909193284, ((80, 4500), 'ax1_down'): -137.16461249245535, ((0, 1800), 'ax2_up'): 1.3192396590976316, ((100, 3600), 'ax2_down'): -114.7250299275338, ((100, 3600), 'ax2_up'): -216.00121683669147, ((60, 1800), 'ax2_up'): 8.716691304647433, ((0, 900), 'ax2_up'): 0.0, ((20, 4500), 'ax1_down'): 30.505040509685752, ((80, 4500), 'ax1_up'): -111.31459337648509, ((80, 4500), 'ax2_up'): -361.3643035967185, ((60, 900), 'ax1_up'): 8.50363497559431, ((0, 0), 'ax1_down'): 0.0, ((0, 0), 'ax2_down'): 0.8830901947034316, ((100, 1800), 'ax1_down'): 0, ((0, 1800), 'ax1_up'): 0, ((40, 3600), 'ax1_down'): 30.82764775386842, ((100, 3600), 'ax1_up'): -30.45357607321216, ((60, 2700), 'ax2_down'): 57.54619916253435, ((40, 1800), 'ax1_up'): 17.423378654364733, ((80, 0), 'ax1_down'): 6.399713499410923, ((20, 2700), 'ax2_down'): 30.764486121347176, ((80, 3600), 'ax1_down'): -20.59700805853007, ((20, 4500), 'ax2_down'): 0, ((20, 1800), 'ax1_up'): 7.152623191086101, ((20, 1800), 'ax2_up'): 6.886658890990823, ((100, 4500), 'ax2_up'): -416.23787640374945, ((40, 4500), 'ax1_up'): 23.477698741446762, ((40, 900), 'ax2_up'): 1.7590451312928224, ((20, 900), 'ax1_up'): 0.05230944747745527, ((80, 2700), 'ax2_down'): 86.6281515999793, ((20, 3600), 'ax1_up'): 22.774972549057406, ((40, 2700), 'ax1_up'): 24.95933888683269, ((40, 3600), 'ax2_down'): 31.460446894311303, ((100, 2700), 'ax1_up'): 40.44496381238849, ((100, 2700), 'ax1_down'): 0, ((20, 3600), 'ax1_down'): 44.407716169516924, ((60, 0), 'ax1_down'): 9.736307384484945, ((40, 0), 'ax1_up'): 1.0211564612384518, ((60, 900), 'ax2_up'): 1.4803800210356712, ((20, 0), 'ax2_up'): 0, ((100, 900), 'ax2_down'): 36.02728858071316, ((60, 3600), 'ax2_down'): 75.45196572849173, ((80, 900), 'ax2_up'): 6.908440098166466, ((80, 1800), 'ax2_up'): 32.743207924046594, ((60, 1800), 'ax1_up'): 16.850920316764537, ((80, 0), 'ax2_up'): 0, ((100, 900), 'ax1_down'): 0, ((60, 4500), 'ax2_up'): -208.84840349379346, ((60, 3600), 'ax1_up'): 40.44296988504387, ((0, 900), 'ax2_down'): 0.11071515083312988, ((80, 2700), 'ax2_up'): 20.40173499274749, ((0, 4500), 'ax2_down'): 0, ((40, 1800), 'ax2_up'): 14.516489385949647, ((80, 2700), 'ax1_up'): 49.225769729104606, ((0, 2700), 'ax2_up'): 10.92633008467456, ((0, 900), 'ax1_down'): 7.545423009641299, ((80, 900), 'ax2_down'): 54.66522051717101, ((20, 0), 'ax2_down'): 3.427741883858816, ((0, 900), 'ax1_up'): 0, ((80, 1800), 'ax2_down'): 69.42303224601378, ((0, 0), 'ax1_up'): 0, ((60, 4500), 'ax2_down'): 0, ((100, 4500), 'ax1_up'): -243.81618387619656, ((0, 4500), 'ax2_up'): 24.427969779147595, ((0, 3600), 'ax2_down'): 18.3776937460812, ((40, 2700), 'ax1_down'): 41.50380088236779, ((100, 4500), 'ax1_down'): 0, ((100, 0), 'ax2_down'): 20.56280452927966, ((100, 1800), 'ax2_up'): 23.669855592384067, ((60, 1800), 'ax2_down'): 46.81806370585207, ((40, 3600), 'ax2_up'): 50.771469401183282, ((40, 0), 'ax1_down'): 1.4803800210356712, ((100, 0), 'ax1_up'): 6.908440098166466, ((100, 4500), 'ax2_down'): 0, ((80, 3600), 'ax2_up'): -180.10808149060955, ((60, 0), 'ax2_down'): 3.416677387607247, ((0, 2700), 'ax2_down'): 22.475344210682564, ((80, 900), 'ax1_up'): 13.189968358232132, ((20, 3600), 'ax2_down'): 22.78919971420724, ((20, 900), 'ax2_up'): 1.1032669563753257, ((20, 2700), 'ax1_up'): 14.16703110955465, ((20, 1800), 'ax2_down'): 26.45566785409041, ((100, 900), 'ax1_up'): 7.818252949696658}


# filename = os.path.join('Q-Saves', 'Q_Save_t.pkl')
# with open(filename, 'wb') as file:
#     pickle.dump(Q, file)


# Parameters
number_of_episodes = 1000
initial_epsilon = 0.85
final_epsilon = 0.1
exp_multiplier = 0.1
episodes = np.arange(number_of_episodes)

# Vectorized epsilon calculation
epsilons = initial_epsilon * np.exp(-episodes / number_of_episodes * exp_multiplier)
epsilons = np.maximum(epsilons, final_epsilon)  # Apply minimum threshold

# Plotting
plt.figure(figsize=(10, 6))
plt.plot(episodes, epsilons, label='Epsilon Decay', color='blue', linestyle='--')
plt.xlabel('Episodes')
plt.ylabel('Epsilon')
plt.title('Exponential Decay of Epsilon: with decay rate of ' + str(exp_multiplier))
plt.legend()
plt.grid(True)

# Adding markers and text for the start and end points
plt.scatter([episodes[0], episodes[-1]], [epsilons[0], epsilons[-1]], color='red')
plt.text(episodes[0], epsilons[0], f'Start: {epsilons[0]:.2f}', ha='left', va='bottom', color='red')
plt.text(episodes[-1], epsilons[-1], f'End: {epsilons[-1]:.2f}', ha='right', va='top', color='red')

plt.show()

